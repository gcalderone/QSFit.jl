var documenterSearchIndex = {"docs":
[{"location":"components/#Components","page":"Components","title":"Components","text":"","category":"section"},{"location":"components/","page":"Components","title":"Components","text":"The QSFit.jl package implements the following GModelFit-compatible components:","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"balmercont: Balmer continuum (λ < 3645Å) and pseudo-continuum (i.e. unresolved Balmer emission lines at λ < 3645Å);\ncutoff_powerlaw: Continuum cutoff-powerlaw;\ngaussconv: Convolution of a spectrum sampled on a log-regular grid with a Gaussian kernel;\nhostgalaxy: Host galaxy templates;\ninterpolator: Interpolate generic template on a wavelength grid;\nironopt: Iron complex emission lines at optical wavelengths (from Véron-Cetty et al. 2004);\nironuv: Iron complex emission lines at UV wavelengths (from Vestergaard & Wilkes 2001);\npowerlaw: Continuum powerlaw;\nsbpl: Continuum smoothly broken powerlaw;\nSpecLineAsymmGauss: Emission line with asymmetric Gaussian profile;\nSpecLineGauss: Emission line with Gaussian profile;\nSpecLineLorentz: Emission line with Lorentz profile;\nSpecLineVoigt: Emission line with Voigt profile;","category":"page"},{"location":"components/","page":"Components","title":"Components","text":"To be written...","category":"page"},{"location":"","page":"QSFit","title":"QSFit","text":"include(\"setup.jl\")","category":"page"},{"location":"#QSFit.jl","page":"QSFit","title":"QSFit.jl","text":"","category":"section"},{"location":"","page":"QSFit","title":"QSFit","text":"QSO spectral fitting made easy !!","category":"page"},{"location":"","page":"QSFit","title":"QSFit","text":"(Image: Stars)","category":"page"},{"location":"","page":"QSFit","title":"QSFit","text":"warn: Warn\nThis software is under active development and details may change at any time without notice.  Also, documentation is not yet exhaustive.","category":"page"},{"location":"","page":"QSFit","title":"QSFit","text":"QSFit started as an attempt to perform automatic analysis of optical spectra of AGNs and QSOs in a simple, replicable and shareable way. The first implementation in IDL language (see repo here has been used to analyze 71261 AGN and QSO spectra from SDSS DR10.  The resulting spectral properties (such as emission line luminosities and widths, continuum slopes, etc.) are collected in a catalog in FITS format, as well as being publicly available here: https://qsfit.inaf.it/.","category":"page"},{"location":"","page":"QSFit","title":"QSFit","text":"The details of the spectral analysis are presented in a paper: Calderone et al. 2017 (also available on arXiv).","category":"page"},{"location":"","page":"QSFit","title":"QSFit","text":"The code has now been ported to Julia and the new package is dubbed QSFit.jl.  It comes with the following advantages with respect to the IDL version:","category":"page"},{"location":"","page":"QSFit","title":"QSFit","text":"Julia is released with a MIT license and doesn't require a paid license to be executed;\nIt provides better performances and allows to distribute workload on multiple CPUs or multiple host;\nIt provides several reusable Components and a few Recipes to perform automatic spectral analysis as well as interactive emissione line fitting;\nIt exploits the concept of customizable recipes (see Recipes) to customize the analysis for specific purposes;","category":"page"},{"location":"","page":"QSFit","title":"QSFit","text":"QSFit.jl relies on the GModelFit.jl package to perform spectral fitting.  A basic knowledge of such package is required to get the most out of QSFit.jl.","category":"page"},{"location":"#Installation","page":"QSFit","title":"Installation","text":"","category":"section"},{"location":"","page":"QSFit","title":"QSFit","text":"In the Julia REPL type:","category":"page"},{"location":"","page":"QSFit","title":"QSFit","text":"using Pkg\nPkg.add(\"GModelFit.jl\")\nPkg.add(\"GModelFitViewer.jl\")\nPkg.add(url=\"https://github.com/gcalderone/QSFit.jl\", rev=\"0.1.0\")","category":"page"},{"location":"","page":"QSFit","title":"QSFit","text":"To test the package type Pkg.test(\"QSFit\").","category":"page"},{"location":"#Basic-usage","page":"QSFit","title":"Basic usage","text":"","category":"section"},{"location":"","page":"QSFit","title":"QSFit","text":"The most important types used in QSFit.jl are:","category":"page"},{"location":"","page":"QSFit","title":"QSFit","text":"Spectrum: it represent an observed spectrum of a AGN or QSO.  It contains both the observed wavelengths and flux densities (with associated undertainties), as well as a map of \"good\" (i.e. reliable) spectral bins and an indication of spectral resolution.  The Spectrum object can operate on spectra taken from any instrument (not only SDSS);\nRecipe: it is a container for a specific recipe to be used to analyze a Spectrum, and for all recipe-specific options.  QSFit.jl provides a few ready-to-use recipes to analyze the spectrum, which can optionally be customized by the user.  New recipes can also be implemented.","category":"page"},{"location":"","page":"QSFit","title":"QSFit","text":"The typical workflow for a spectral analysis is as follows:","category":"page"},{"location":"","page":"QSFit","title":"QSFit","text":"using QSFit, QSFit.QSORecipes\n# Download a spectrum\nfilename = \"/home/gcalderone/my/work/software/qsfit/data/spec-0752-52251-0323.fits\" \n# download(\"http://dr10.sdss3.org/sas/dr10/sdss/spectro/redux/26/spectra/0752/spec-0752-52251-0323.fits\")\n\n# Read spectrum into a Spectrum Object\nspec = Spectrum(Val(:SDSS_DR10), filename, label=\"My SDSS source\")\n\n# Create a Recipe object based on the Type1 recipe to analyze the spectrum\nrecipe = Recipe(Type1, redshift=0.3806, Av=0.21)\n\n# Analyze the spectrum with the above recipe\nres = analyze(recipe, spec)\n\n# Display best fit parameter values:\nshow(res.bestfit)","category":"page"},{"location":"","page":"QSFit","title":"QSFit","text":"The best fit model can be displayed using either Gnuplot.jl (to open a plot window):","category":"page"},{"location":"","page":"QSFit","title":"QSFit","text":"using Gnuplot\n@gp res yrange=[0, 0.25]\nsaveas(\"example1\") # hide","category":"page"},{"location":"","page":"QSFit","title":"QSFit","text":"(Image: )","category":"page"},{"location":"","page":"QSFit","title":"QSFit","text":"or GModelFitViewer.jl (to display the plot in a browser):","category":"page"},{"location":"","page":"QSFit","title":"QSFit","text":"using GModelFitViewer\nviewer(res)\nprintln() # hide","category":"page"},{"location":"recipes/#Recipes","page":"Recipes","title":"Recipes","text":"","category":"section"},{"location":"recipes/","page":"Recipes","title":"Recipes","text":"QSFit.jl provides the following ready-to-use recipes:","category":"page"},{"location":"recipes/#InteractiveLineFit","page":"Recipes","title":"InteractiveLineFit","text":"","category":"section"},{"location":"recipes/","page":"Recipes","title":"Recipes","text":"Interactive emission line fitting. The user is asked to provide the initial guess wavelengths of emission lines by clicking on a plot (provided by the Gnuplot.jl package), as well as to decide the line profile to be used. Example:","category":"page"},{"location":"recipes/","page":"Recipes","title":"Recipes","text":"using QSFit, QSFit.LineFitRecipes\n\nfilename = download(\"http://dr10.sdss3.org/sas/dr10/sdss/spectro/redux/26/spectra/0752/spec-0752-52251-0323.fits\")\nspec = Spectrum(Val(:SDSS_DR10), filename)\nrecipe = Recipe(InteractiveLineFit, redshift=0.3806)\nres = analyze(recipe, spec)","category":"page"},{"location":"recipes/","page":"Recipes","title":"Recipes","text":"After interactive selection the above code will print the relevant options to replicate the same analysis using the LineFit recipe (see below);","category":"page"},{"location":"recipes/#LineFit","page":"Recipes","title":"LineFit","text":"","category":"section"},{"location":"recipes/","page":"Recipes","title":"Recipes","text":"Non-interactive line fitting.  The user should provide the relevant options such as the redshift, the wavelength range, the guess wavelengths of the emission lines, etc.  The latter can be obtained using the above mentioned InteractiveLineFit recipe.  Example:","category":"page"},{"location":"recipes/","page":"Recipes","title":"Recipes","text":"using QSFit, QSFit.LineFitRecipes\n\nfilename = download(\"http://dr10.sdss3.org/sas/dr10/sdss/spectro/redux/26/spectra/0752/spec-0752-52251-0323.fits\")\nspec = Spectrum(Val(:SDSS_DR10), filename)\nrecipe = Recipe(LineFit)\nrecipe.redshift = 0.3806\nrecipe.Av = missing\nrecipe.wavelength_range = [4532.52088596136, 5254.15348271789]\nrecipe.line_profiles = :gauss\nrecipe.lines = [\n     LineDescriptor(4864.68, NarrowLine, BroadLine)\n     LineDescriptor(5009.03, ForbiddenLine)\n]\n\nres = analyze(recipe, spec)","category":"page"},{"location":"recipes/#Type1","page":"Recipes","title":"Type1","text":"","category":"section"},{"location":"recipes/","page":"Recipes","title":"Recipes","text":"Automatic spectral analysis of Type1 AGN and QSO at redshifts <~ 2.1.  Example:","category":"page"},{"location":"recipes/","page":"Recipes","title":"Recipes","text":"using QSFit, QSFit.QSORecipes\nfilename = download(\"http://dr10.sdss3.org/sas/dr10/sdss/spectro/redux/26/spectra/0752/spec-0752-52251-0323.fits\")\nspec = Spectrum(Val(:SDSS_DR10), filename)\nrecipe = Recipe(Type1, redshift=0.3806, Av=0.21)\nres = analyze(recipe, spec)","category":"page"},{"location":"recipes/#Customizing-built-in-recipes","page":"Recipes","title":"Customizing built-in recipes","text":"","category":"section"},{"location":"recipes/","page":"Recipes","title":"Recipes","text":"To be written.","category":"page"},{"location":"recipes/","page":"Recipes","title":"Recipes","text":"using GModelFit\nabstract type MyRecipe <: Type1 end\nimport QSFit.QSORecipes.add_qso_continuum!\nfunction add_qso_continuum!(recipe::Recipe{T}, resid::GModelFit.Residuals) where T <: MyRecipe\n    @invoke add_qso_continuum!(recipe::Recipe{<: supertype(T)}, resid)\n    resid.meval.model[:QSOcont].alpha.fixed = true\nend\nspec = Spectrum(Val(:SDSS_DR10), \"spec-0752-52251-0323.fits\", label=\"My SDSS source\")\nrecipe = Recipe(MyRecipe, redshift=0.3806)\nres = analyze(recipe, spec)\ndisplay(res.bestfit)\n\n\nusing GModelFit, Statistics\nfunction add_qso_continuum!(recipe::Recipe{T}, resid::GModelFit.Residuals) where T <: MyRecipe\n    λ = coords(domain(resid.data))\n    comp = QSFit.sbpl(3000)\n    comp.x0.val = median(λ)\n    comp.norm.val = median(values(resid.data))\n    comp.norm.low = comp.norm.val / 1000.  # ensure contiuum remains positive (needed to estimate EWs)\n    resid.meval.model[:QSOcont] = comp\n    push!(resid.meval.model[:Continuum].list, :QSOcont)\n    GModelFit.update!(resid.meval)\nend\nspec = Spectrum(Val(:SDSS_DR10), \"spec-0752-52251-0323.fits\", label=\"My SDSS source\")\nrecipe = Recipe(MyRecipe, redshift=0.3806)\nres = analyze(recipe, spec)\ndisplay(res.bestfit)","category":"page"},{"location":"recipes/#Define-new-recipes","page":"Recipes","title":"Define new recipes","text":"","category":"section"},{"location":"recipes/","page":"Recipes","title":"Recipes","text":"To be written.","category":"page"},{"location":"recipes/","page":"Recipes","title":"Recipes","text":"using GModelFit, QSFit\nimport QSFit: init_recipe!, preprocess_spec!, analyze\n\nabstract type MyRecipe <: AbstractRecipeSpec end\n\nfunction init_recipe!(recipe::Recipe{T}) where T <: MyRecipe\n    @invoke init_recipe!(recipe::Recipe{<: AbstractRecipeSpec})\n    recipe.wavelength_range = [1215, 7.3e3]\nend\n\nfunction preprocess_spec!(recipe::Recipe{T}, spec::QSFit.Spectrum) where T <: MyRecipe\n    @invoke preprocess_spec!(recipe::Recipe{<: AbstractRecipeSpec}, spec)\nend\n\nfunction analyze(recipe::Recipe{T}, spec::QSFit.Spectrum, resid::GModelFit.Residuals) where T <: MyRecipe\n    resid.mzer.config.ftol = 1.e-6\n    model = resid.meval.model\n    return GModelFit.minimize!(resid)\nend","category":"page"}]
}
